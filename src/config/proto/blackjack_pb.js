/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var trump_pb = require('./trump_pb.js');
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.BettingReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.BettingReply.BettingResult', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.BettingRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.DoubleDownReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.GetGameResultReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.HitReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.HitRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.PlayerAction', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.PlayerResult', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.PlayerResult.GameResult', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.SplitReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.SplitRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.StandReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.blackjack.StandRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.repeatedFields_, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.displayName = 'proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    usersidList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest}
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest;
  return proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest}
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setUsersidList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsersidList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated int64 usersId = 2;
 * @return {!Array.<number>}
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.prototype.getUsersidList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.prototype.setUsersidList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.prototype.addUsersid = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomRequest.prototype.clearUsersidList = function() {
  this.setUsersidList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply.displayName = 'proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply}
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply;
  return proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply}
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.CreateNewGameRoomReply.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.BettingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.BettingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.BettingRequest.displayName = 'proto.net.gurigoro.kaiji.blackjack.BettingRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.BettingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.BettingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.BettingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.BettingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    betpoints: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.BettingRequest}
 */
proto.net.gurigoro.kaiji.blackjack.BettingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.BettingRequest;
  return proto.net.gurigoro.kaiji.blackjack.BettingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.BettingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.BettingRequest}
 */
proto.net.gurigoro.kaiji.blackjack.BettingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBetpoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.BettingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.BettingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.BettingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.BettingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBetpoints();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.blackjack.BettingRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.blackjack.BettingRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.BettingRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.BettingRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 userId = 3;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.BettingRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.BettingRequest.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 betPoints = 4;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.BettingRequest.prototype.getBetpoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.BettingRequest.prototype.setBetpoints = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.BettingReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.BettingReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.BettingReply.displayName = 'proto.net.gurigoro.kaiji.blackjack.BettingReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.BettingReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.BettingReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.BettingReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.BettingReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.BettingReply}
 */
proto.net.gurigoro.kaiji.blackjack.BettingReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.BettingReply;
  return proto.net.gurigoro.kaiji.blackjack.BettingReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.BettingReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.BettingReply}
 */
proto.net.gurigoro.kaiji.blackjack.BettingReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.net.gurigoro.kaiji.blackjack.BettingReply.BettingResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.BettingReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.BettingReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.BettingReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.BettingReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.net.gurigoro.kaiji.blackjack.BettingReply.BettingResult = {
  SUCCEED: 0,
  NO_ENOUGH_POINTS: 1,
  ALREADY_BETTED: 2,
  UNKNOWN_FAILED: 3
};

/**
 * optional BettingResult result = 1;
 * @return {!proto.net.gurigoro.kaiji.blackjack.BettingReply.BettingResult}
 */
proto.net.gurigoro.kaiji.blackjack.BettingReply.prototype.getResult = function() {
  return /** @type {!proto.net.gurigoro.kaiji.blackjack.BettingReply.BettingResult} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.net.gurigoro.kaiji.blackjack.BettingReply.BettingResult} value */
proto.net.gurigoro.kaiji.blackjack.BettingReply.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 userId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.BettingReply.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.BettingReply.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.displayName = 'proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cards: (f = msg.getCards()) && trump_pb.TrumpCards.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards}
 */
proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards;
  return proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards}
 */
proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = new trump_pb.TrumpCards;
      reader.readMessage(value,trump_pb.TrumpCards.deserializeBinaryFromReader);
      msg.setCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCards();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      trump_pb.TrumpCards.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 userId = 1;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional net.gurigoro.kaiji.TrumpCards cards = 2;
 * @return {?proto.net.gurigoro.kaiji.TrumpCards}
 */
proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.prototype.getCards = function() {
  return /** @type{?proto.net.gurigoro.kaiji.TrumpCards} */ (
    jspb.Message.getWrapperField(this, trump_pb.TrumpCards, 2));
};


/** @param {?proto.net.gurigoro.kaiji.TrumpCards|undefined} value */
proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.prototype.setCards = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.prototype.clearCards = function() {
  this.setCards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.prototype.hasCards = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.repeatedFields_, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.displayName = 'proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    playercardsList: jspb.Message.toObjectList(msg.getPlayercardsList(),
    proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest;
  return proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    case 3:
      var value = new proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards;
      reader.readMessage(value,proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.deserializeBinaryFromReader);
      msg.addPlayercards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPlayercardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards.serializeBinaryToWriter
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated FirstDealPlayerCards playerCards = 3;
 * @return {!Array.<!proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards>}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.prototype.getPlayercardsList = function() {
  return /** @type{!Array.<!proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards, 3));
};


/** @param {!Array.<!proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards>} value */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.prototype.setPlayercardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards=} opt_value
 * @param {number=} opt_index
 * @return {!proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.prototype.addPlayercards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.net.gurigoro.kaiji.blackjack.FirstDealPlayerCards, opt_index);
};


proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsRequest.prototype.clearPlayercardsList = function() {
  this.setPlayercardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.repeatedFields_, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.displayName = 'proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cardpoints: jspb.Message.getFieldWithDefault(msg, 2, 0),
    actionsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions}
 */
proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions;
  return proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions}
 */
proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCardpoints(value);
      break;
    case 3:
      var value = /** @type {!Array.<!proto.net.gurigoro.kaiji.blackjack.PlayerAction>} */ (reader.readPackedEnum());
      msg.setActionsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCardpoints();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
};


/**
 * optional int64 userId = 1;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 cardPoints = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.prototype.getCardpoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.prototype.setCardpoints = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated PlayerAction actions = 3;
 * @return {!Array.<!proto.net.gurigoro.kaiji.blackjack.PlayerAction>}
 */
proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.prototype.getActionsList = function() {
  return /** @type {!Array.<!proto.net.gurigoro.kaiji.blackjack.PlayerAction>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<!proto.net.gurigoro.kaiji.blackjack.PlayerAction>} value */
proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.prototype.setActionsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.net.gurigoro.kaiji.blackjack.PlayerAction} value
 * @param {number=} opt_index
 */
proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.prototype.addActions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.prototype.clearActionsList = function() {
  this.setActionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.repeatedFields_, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.displayName = 'proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply;
  return proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    case 2:
      var value = new proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions;
      reader.readMessage(value,proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated AllowedPlayerActions actions = 2;
 * @return {!Array.<!proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions>}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.prototype.getActionsList = function() {
  return /** @type{!Array.<!proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions, 2));
};


/** @param {!Array.<!proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions>} value */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.prototype.setActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions=} opt_value
 * @param {number=} opt_index
 * @return {!proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.net.gurigoro.kaiji.blackjack.AllowedPlayerActions, opt_index);
};


proto.net.gurigoro.kaiji.blackjack.SetFirstDealedCardsReply.prototype.clearActionsList = function() {
  this.setActionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.displayName = 'proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    card: (f = msg.getCard()) && trump_pb.TrumpCard.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest;
  return proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    case 3:
      var value = new trump_pb.TrumpCard;
      reader.readMessage(value,trump_pb.TrumpCard.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      trump_pb.TrumpCard.serializeBinaryToWriter
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional net.gurigoro.kaiji.TrumpCard card = 3;
 * @return {?proto.net.gurigoro.kaiji.TrumpCard}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.prototype.getCard = function() {
  return /** @type{?proto.net.gurigoro.kaiji.TrumpCard} */ (
    jspb.Message.getWrapperField(this, trump_pb.TrumpCard, 3));
};


/** @param {?proto.net.gurigoro.kaiji.TrumpCard|undefined} value */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.prototype.setCard = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.prototype.clearCard = function() {
  this.setCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardRequest.prototype.hasCard = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply.displayName = 'proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply;
  return proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.blackjack.SetFirstDealersCardReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.HitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.HitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.HitRequest.displayName = 'proto.net.gurigoro.kaiji.blackjack.HitRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.HitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.HitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.HitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.HitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    card: (f = msg.getCard()) && trump_pb.TrumpCard.toObject(includeInstance, f),
    handsindex: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.HitRequest}
 */
proto.net.gurigoro.kaiji.blackjack.HitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.HitRequest;
  return proto.net.gurigoro.kaiji.blackjack.HitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.HitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.HitRequest}
 */
proto.net.gurigoro.kaiji.blackjack.HitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 4:
      var value = new trump_pb.TrumpCard;
      reader.readMessage(value,trump_pb.TrumpCard.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHandsindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.HitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.HitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.HitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.HitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      trump_pb.TrumpCard.serializeBinaryToWriter
    );
  }
  f = message.getHandsindex();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.blackjack.HitRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.blackjack.HitRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.HitRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.HitRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 userId = 3;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.HitRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.HitRequest.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional net.gurigoro.kaiji.TrumpCard card = 4;
 * @return {?proto.net.gurigoro.kaiji.TrumpCard}
 */
proto.net.gurigoro.kaiji.blackjack.HitRequest.prototype.getCard = function() {
  return /** @type{?proto.net.gurigoro.kaiji.TrumpCard} */ (
    jspb.Message.getWrapperField(this, trump_pb.TrumpCard, 4));
};


/** @param {?proto.net.gurigoro.kaiji.TrumpCard|undefined} value */
proto.net.gurigoro.kaiji.blackjack.HitRequest.prototype.setCard = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.net.gurigoro.kaiji.blackjack.HitRequest.prototype.clearCard = function() {
  this.setCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.gurigoro.kaiji.blackjack.HitRequest.prototype.hasCard = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 handsIndex = 5;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.HitRequest.prototype.getHandsindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.HitRequest.prototype.setHandsindex = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.HitReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.gurigoro.kaiji.blackjack.HitReply.repeatedFields_, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.HitReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.HitReply.displayName = 'proto.net.gurigoro.kaiji.blackjack.HitReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.gurigoro.kaiji.blackjack.HitReply.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.HitReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.HitReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.HitReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.HitReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isbusted: jspb.Message.getFieldWithDefault(msg, 3, false),
    cardpoints: jspb.Message.getFieldWithDefault(msg, 4, 0),
    allowedactionsList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.HitReply}
 */
proto.net.gurigoro.kaiji.blackjack.HitReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.HitReply;
  return proto.net.gurigoro.kaiji.blackjack.HitReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.HitReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.HitReply}
 */
proto.net.gurigoro.kaiji.blackjack.HitReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsbusted(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCardpoints(value);
      break;
    case 5:
      var value = /** @type {!Array.<!proto.net.gurigoro.kaiji.blackjack.PlayerAction>} */ (reader.readPackedEnum());
      msg.setAllowedactionsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.HitReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.HitReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.HitReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.HitReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getIsbusted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getCardpoints();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getAllowedactionsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.blackjack.HitReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.blackjack.HitReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 userId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.HitReply.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.HitReply.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool isBusted = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.blackjack.HitReply.prototype.getIsbusted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.blackjack.HitReply.prototype.setIsbusted = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 cardPoints = 4;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.HitReply.prototype.getCardpoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.HitReply.prototype.setCardpoints = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated PlayerAction allowedActions = 5;
 * @return {!Array.<!proto.net.gurigoro.kaiji.blackjack.PlayerAction>}
 */
proto.net.gurigoro.kaiji.blackjack.HitReply.prototype.getAllowedactionsList = function() {
  return /** @type {!Array.<!proto.net.gurigoro.kaiji.blackjack.PlayerAction>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<!proto.net.gurigoro.kaiji.blackjack.PlayerAction>} value */
proto.net.gurigoro.kaiji.blackjack.HitReply.prototype.setAllowedactionsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.net.gurigoro.kaiji.blackjack.PlayerAction} value
 * @param {number=} opt_index
 */
proto.net.gurigoro.kaiji.blackjack.HitReply.prototype.addAllowedactions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.net.gurigoro.kaiji.blackjack.HitReply.prototype.clearAllowedactionsList = function() {
  this.setAllowedactionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.StandRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.StandRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.StandRequest.displayName = 'proto.net.gurigoro.kaiji.blackjack.StandRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.StandRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.StandRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.StandRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.StandRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    handsindex: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.StandRequest}
 */
proto.net.gurigoro.kaiji.blackjack.StandRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.StandRequest;
  return proto.net.gurigoro.kaiji.blackjack.StandRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.StandRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.StandRequest}
 */
proto.net.gurigoro.kaiji.blackjack.StandRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHandsindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.StandRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.StandRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.StandRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.StandRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getHandsindex();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.blackjack.StandRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.blackjack.StandRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.StandRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.StandRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 userId = 3;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.StandRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.StandRequest.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 handsIndex = 4;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.StandRequest.prototype.getHandsindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.StandRequest.prototype.setHandsindex = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.StandReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.StandReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.StandReply.displayName = 'proto.net.gurigoro.kaiji.blackjack.StandReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.StandReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.StandReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.StandReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.StandReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.StandReply}
 */
proto.net.gurigoro.kaiji.blackjack.StandReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.StandReply;
  return proto.net.gurigoro.kaiji.blackjack.StandReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.StandReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.StandReply}
 */
proto.net.gurigoro.kaiji.blackjack.StandReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.StandReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.StandReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.StandReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.StandReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.blackjack.StandReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.blackjack.StandReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.SplitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.SplitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.SplitRequest.displayName = 'proto.net.gurigoro.kaiji.blackjack.SplitRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.SplitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.SplitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.SplitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SplitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SplitRequest}
 */
proto.net.gurigoro.kaiji.blackjack.SplitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.SplitRequest;
  return proto.net.gurigoro.kaiji.blackjack.SplitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SplitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SplitRequest}
 */
proto.net.gurigoro.kaiji.blackjack.SplitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.SplitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.SplitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SplitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SplitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.blackjack.SplitRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.blackjack.SplitRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.SplitRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.SplitRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 userId = 3;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.SplitRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.SplitRequest.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.SplitReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.SplitReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.SplitReply.displayName = 'proto.net.gurigoro.kaiji.blackjack.SplitReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.SplitReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.SplitReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.SplitReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SplitReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SplitReply}
 */
proto.net.gurigoro.kaiji.blackjack.SplitReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.SplitReply;
  return proto.net.gurigoro.kaiji.blackjack.SplitReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SplitReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SplitReply}
 */
proto.net.gurigoro.kaiji.blackjack.SplitReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.SplitReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.SplitReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SplitReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SplitReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.blackjack.SplitReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.blackjack.SplitReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.displayName = 'proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    card: (f = msg.getCard()) && trump_pb.TrumpCard.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest;
  return proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 4:
      var value = new trump_pb.TrumpCard;
      reader.readMessage(value,trump_pb.TrumpCard.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      trump_pb.TrumpCard.serializeBinaryToWriter
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 userId = 3;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional net.gurigoro.kaiji.TrumpCard card = 4;
 * @return {?proto.net.gurigoro.kaiji.TrumpCard}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.prototype.getCard = function() {
  return /** @type{?proto.net.gurigoro.kaiji.TrumpCard} */ (
    jspb.Message.getWrapperField(this, trump_pb.TrumpCard, 4));
};


/** @param {?proto.net.gurigoro.kaiji.TrumpCard|undefined} value */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.prototype.setCard = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.prototype.clearCard = function() {
  this.setCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownRequest.prototype.hasCard = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.DoubleDownReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.displayName = 'proto.net.gurigoro.kaiji.blackjack.DoubleDownReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.DoubleDownReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isbusted: jspb.Message.getFieldWithDefault(msg, 3, false),
    cardpoints: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.DoubleDownReply}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.DoubleDownReply;
  return proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.DoubleDownReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.DoubleDownReply}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsbusted(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCardpoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.DoubleDownReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getIsbusted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getCardpoints();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 userId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool isBusted = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.prototype.getIsbusted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.prototype.setIsbusted = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 cardPoints = 4;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.prototype.getCardpoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.DoubleDownReply.prototype.setCardpoints = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.displayName = 'proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    card: (f = msg.getCard()) && trump_pb.TrumpCard.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest;
  return proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    case 3:
      var value = new trump_pb.TrumpCard;
      reader.readMessage(value,trump_pb.TrumpCard.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      trump_pb.TrumpCard.serializeBinaryToWriter
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional net.gurigoro.kaiji.TrumpCard card = 3;
 * @return {?proto.net.gurigoro.kaiji.TrumpCard}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.prototype.getCard = function() {
  return /** @type{?proto.net.gurigoro.kaiji.TrumpCard} */ (
    jspb.Message.getWrapperField(this, trump_pb.TrumpCard, 3));
};


/** @param {?proto.net.gurigoro.kaiji.TrumpCard|undefined} value */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.prototype.setCard = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.prototype.clearCard = function() {
  this.setCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardRequest.prototype.hasCard = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.displayName = 'proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false),
    cardpoints: jspb.Message.getFieldWithDefault(msg, 2, 0),
    shouldhit: jspb.Message.getFieldWithDefault(msg, 3, false),
    isbusted: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply;
  return proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCardpoints(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShouldhit(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsbusted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCardpoints();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getShouldhit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIsbusted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 cardPoints = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.prototype.getCardpoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.prototype.setCardpoints = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool shouldHit = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.prototype.getShouldhit = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.prototype.setShouldhit = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool isBusted = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.prototype.getIsbusted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.blackjack.SetNextDealersCardReply.prototype.setIsbusted = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest.displayName = 'proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest}
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest;
  return proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest}
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.GetGameResultRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.PlayerResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.PlayerResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.PlayerResult.displayName = 'proto.net.gurigoro.kaiji.blackjack.PlayerResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.PlayerResult.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.PlayerResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.PlayerResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.PlayerResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameresult: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gotpoints: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.PlayerResult}
 */
proto.net.gurigoro.kaiji.blackjack.PlayerResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.PlayerResult;
  return proto.net.gurigoro.kaiji.blackjack.PlayerResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.PlayerResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.PlayerResult}
 */
proto.net.gurigoro.kaiji.blackjack.PlayerResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {!proto.net.gurigoro.kaiji.blackjack.PlayerResult.GameResult} */ (reader.readEnum());
      msg.setGameresult(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGotpoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.PlayerResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.PlayerResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.PlayerResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.PlayerResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getGameresult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getGotpoints();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.net.gurigoro.kaiji.blackjack.PlayerResult.GameResult = {
  LOSE: 0,
  TIE: 1,
  WIN: 2
};

/**
 * optional int64 userId = 1;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.PlayerResult.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.PlayerResult.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional GameResult gameResult = 2;
 * @return {!proto.net.gurigoro.kaiji.blackjack.PlayerResult.GameResult}
 */
proto.net.gurigoro.kaiji.blackjack.PlayerResult.prototype.getGameresult = function() {
  return /** @type {!proto.net.gurigoro.kaiji.blackjack.PlayerResult.GameResult} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.net.gurigoro.kaiji.blackjack.PlayerResult.GameResult} value */
proto.net.gurigoro.kaiji.blackjack.PlayerResult.prototype.setGameresult = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 gotPoints = 3;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.PlayerResult.prototype.getGotpoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.PlayerResult.prototype.setGotpoints = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.repeatedFields_, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.GetGameResultReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.displayName = 'proto.net.gurigoro.kaiji.blackjack.GetGameResultReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.GetGameResultReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false),
    playerresultsList: jspb.Message.toObjectList(msg.getPlayerresultsList(),
    proto.net.gurigoro.kaiji.blackjack.PlayerResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.GetGameResultReply}
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.GetGameResultReply;
  return proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.GetGameResultReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.GetGameResultReply}
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    case 2:
      var value = new proto.net.gurigoro.kaiji.blackjack.PlayerResult;
      reader.readMessage(value,proto.net.gurigoro.kaiji.blackjack.PlayerResult.deserializeBinaryFromReader);
      msg.addPlayerresults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.GetGameResultReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPlayerresultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.net.gurigoro.kaiji.blackjack.PlayerResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated PlayerResult playerResults = 2;
 * @return {!Array.<!proto.net.gurigoro.kaiji.blackjack.PlayerResult>}
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.prototype.getPlayerresultsList = function() {
  return /** @type{!Array.<!proto.net.gurigoro.kaiji.blackjack.PlayerResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.net.gurigoro.kaiji.blackjack.PlayerResult, 2));
};


/** @param {!Array.<!proto.net.gurigoro.kaiji.blackjack.PlayerResult>} value */
proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.prototype.setPlayerresultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.net.gurigoro.kaiji.blackjack.PlayerResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.net.gurigoro.kaiji.blackjack.PlayerResult}
 */
proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.prototype.addPlayerresults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.net.gurigoro.kaiji.blackjack.PlayerResult, opt_index);
};


proto.net.gurigoro.kaiji.blackjack.GetGameResultReply.prototype.clearPlayerresultsList = function() {
  this.setPlayerresultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest.displayName = 'proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest}
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest;
  return proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest}
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply.displayName = 'proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply}
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply;
  return proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply}
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.blackjack.DestroyGameRoomReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.net.gurigoro.kaiji.blackjack.PlayerAction = {
  UNKNOWN: 0,
  HIT: 1,
  STAND: 2,
  SPLIT: 3,
  DOUBLEDOWN: 4
};

goog.object.extend(exports, proto.net.gurigoro.kaiji.blackjack);
