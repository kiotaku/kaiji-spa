/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var trump_pb = require('./trump_pb.js');
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.BettingResult', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.CallReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.CallRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.CheckReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.CheckRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.FoldReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.FoldRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.GetGameResultReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.GetGameResultRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.PlayerAction', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.PlayerResult', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.PlayerResult.GameResult', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.PokerHand', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.RaiseReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.RaiseRequest', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply', null, global);
goog.exportSymbol('proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.repeatedFields_, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.displayName = 'proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    usersidList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest}
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest;
  return proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest}
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setUsersidList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsersidList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated int64 usersId = 2;
 * @return {!Array.<number>}
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.prototype.getUsersidList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.prototype.setUsersidList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.prototype.addUsersid = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.net.gurigoro.kaiji.poker.CreateNewGameRoomRequest.prototype.clearUsersidList = function() {
  this.setUsersidList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply.displayName = 'proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply}
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply;
  return proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply}
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.CreateNewGameRoomReply.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.CallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.CallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.CallRequest.displayName = 'proto.net.gurigoro.kaiji.poker.CallRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.CallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.CallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.CallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.CallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.CallRequest}
 */
proto.net.gurigoro.kaiji.poker.CallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.CallRequest;
  return proto.net.gurigoro.kaiji.poker.CallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.CallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.CallRequest}
 */
proto.net.gurigoro.kaiji.poker.CallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.CallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.CallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.CallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.CallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.poker.CallRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.poker.CallRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.CallRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.CallRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 userId = 3;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.CallRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.CallRequest.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.CallReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.gurigoro.kaiji.poker.CallReply.repeatedFields_, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.CallReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.CallReply.displayName = 'proto.net.gurigoro.kaiji.poker.CallReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.gurigoro.kaiji.poker.CallReply.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.CallReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.CallReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.CallReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.CallReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isallin: jspb.Message.getFieldWithDefault(msg, 3, false),
    nextplayersavailableactionsList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.CallReply}
 */
proto.net.gurigoro.kaiji.poker.CallReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.CallReply;
  return proto.net.gurigoro.kaiji.poker.CallReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.CallReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.CallReply}
 */
proto.net.gurigoro.kaiji.poker.CallReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.net.gurigoro.kaiji.poker.BettingResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsallin(value);
      break;
    case 4:
      var value = /** @type {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>} */ (reader.readPackedEnum());
      msg.setNextplayersavailableactionsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.CallReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.CallReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.CallReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.CallReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getIsallin();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getNextplayersavailableactionsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
};


/**
 * optional BettingResult result = 1;
 * @return {!proto.net.gurigoro.kaiji.poker.BettingResult}
 */
proto.net.gurigoro.kaiji.poker.CallReply.prototype.getResult = function() {
  return /** @type {!proto.net.gurigoro.kaiji.poker.BettingResult} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.net.gurigoro.kaiji.poker.BettingResult} value */
proto.net.gurigoro.kaiji.poker.CallReply.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 userId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.CallReply.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.CallReply.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool isAllIn = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.poker.CallReply.prototype.getIsallin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.poker.CallReply.prototype.setIsallin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated PlayerAction nextPlayersAvailableActions = 4;
 * @return {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>}
 */
proto.net.gurigoro.kaiji.poker.CallReply.prototype.getNextplayersavailableactionsList = function() {
  return /** @type {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>} value */
proto.net.gurigoro.kaiji.poker.CallReply.prototype.setNextplayersavailableactionsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.net.gurigoro.kaiji.poker.PlayerAction} value
 * @param {number=} opt_index
 */
proto.net.gurigoro.kaiji.poker.CallReply.prototype.addNextplayersavailableactions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.net.gurigoro.kaiji.poker.CallReply.prototype.clearNextplayersavailableactionsList = function() {
  this.setNextplayersavailableactionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.RaiseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.RaiseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.RaiseRequest.displayName = 'proto.net.gurigoro.kaiji.poker.RaiseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.RaiseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.RaiseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.RaiseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.RaiseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    betpoints: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.RaiseRequest}
 */
proto.net.gurigoro.kaiji.poker.RaiseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.RaiseRequest;
  return proto.net.gurigoro.kaiji.poker.RaiseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.RaiseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.RaiseRequest}
 */
proto.net.gurigoro.kaiji.poker.RaiseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBetpoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.RaiseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.RaiseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.RaiseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.RaiseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBetpoints();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.poker.RaiseRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.poker.RaiseRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.RaiseRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.RaiseRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 userId = 3;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.RaiseRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.RaiseRequest.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 betPoints = 4;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.RaiseRequest.prototype.getBetpoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.RaiseRequest.prototype.setBetpoints = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.RaiseReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.gurigoro.kaiji.poker.RaiseReply.repeatedFields_, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.RaiseReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.RaiseReply.displayName = 'proto.net.gurigoro.kaiji.poker.RaiseReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.gurigoro.kaiji.poker.RaiseReply.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.RaiseReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.RaiseReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.RaiseReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.RaiseReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nextplayersavailableactionsList: jspb.Message.getRepeatedField(msg, 3),
    fieldbetpoints: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.RaiseReply}
 */
proto.net.gurigoro.kaiji.poker.RaiseReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.RaiseReply;
  return proto.net.gurigoro.kaiji.poker.RaiseReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.RaiseReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.RaiseReply}
 */
proto.net.gurigoro.kaiji.poker.RaiseReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.net.gurigoro.kaiji.poker.BettingResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>} */ (reader.readPackedEnum());
      msg.setNextplayersavailableactionsList(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFieldbetpoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.RaiseReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.RaiseReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.RaiseReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.RaiseReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNextplayersavailableactionsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getFieldbetpoints();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional BettingResult result = 1;
 * @return {!proto.net.gurigoro.kaiji.poker.BettingResult}
 */
proto.net.gurigoro.kaiji.poker.RaiseReply.prototype.getResult = function() {
  return /** @type {!proto.net.gurigoro.kaiji.poker.BettingResult} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.net.gurigoro.kaiji.poker.BettingResult} value */
proto.net.gurigoro.kaiji.poker.RaiseReply.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 userId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.RaiseReply.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.RaiseReply.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated PlayerAction nextPlayersAvailableActions = 3;
 * @return {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>}
 */
proto.net.gurigoro.kaiji.poker.RaiseReply.prototype.getNextplayersavailableactionsList = function() {
  return /** @type {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>} value */
proto.net.gurigoro.kaiji.poker.RaiseReply.prototype.setNextplayersavailableactionsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.net.gurigoro.kaiji.poker.PlayerAction} value
 * @param {number=} opt_index
 */
proto.net.gurigoro.kaiji.poker.RaiseReply.prototype.addNextplayersavailableactions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.net.gurigoro.kaiji.poker.RaiseReply.prototype.clearNextplayersavailableactionsList = function() {
  this.setNextplayersavailableactionsList([]);
};


/**
 * optional int64 fieldBetPoints = 4;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.RaiseReply.prototype.getFieldbetpoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.RaiseReply.prototype.setFieldbetpoints = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.CheckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.CheckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.CheckRequest.displayName = 'proto.net.gurigoro.kaiji.poker.CheckRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.CheckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.CheckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.CheckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.CheckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.CheckRequest}
 */
proto.net.gurigoro.kaiji.poker.CheckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.CheckRequest;
  return proto.net.gurigoro.kaiji.poker.CheckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.CheckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.CheckRequest}
 */
proto.net.gurigoro.kaiji.poker.CheckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.CheckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.CheckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.CheckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.CheckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.poker.CheckRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.poker.CheckRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.CheckRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.CheckRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 userId = 3;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.CheckRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.CheckRequest.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.CheckReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.gurigoro.kaiji.poker.CheckReply.repeatedFields_, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.CheckReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.CheckReply.displayName = 'proto.net.gurigoro.kaiji.poker.CheckReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.gurigoro.kaiji.poker.CheckReply.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.CheckReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.CheckReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.CheckReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.CheckReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false),
    nextplayersavailableactionsList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.CheckReply}
 */
proto.net.gurigoro.kaiji.poker.CheckReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.CheckReply;
  return proto.net.gurigoro.kaiji.poker.CheckReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.CheckReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.CheckReply}
 */
proto.net.gurigoro.kaiji.poker.CheckReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    case 4:
      var value = /** @type {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>} */ (reader.readPackedEnum());
      msg.setNextplayersavailableactionsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.CheckReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.CheckReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.CheckReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.CheckReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getNextplayersavailableactionsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.poker.CheckReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.poker.CheckReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated PlayerAction nextPlayersAvailableActions = 4;
 * @return {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>}
 */
proto.net.gurigoro.kaiji.poker.CheckReply.prototype.getNextplayersavailableactionsList = function() {
  return /** @type {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>} value */
proto.net.gurigoro.kaiji.poker.CheckReply.prototype.setNextplayersavailableactionsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.net.gurigoro.kaiji.poker.PlayerAction} value
 * @param {number=} opt_index
 */
proto.net.gurigoro.kaiji.poker.CheckReply.prototype.addNextplayersavailableactions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.net.gurigoro.kaiji.poker.CheckReply.prototype.clearNextplayersavailableactionsList = function() {
  this.setNextplayersavailableactionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.FoldRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.FoldRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.FoldRequest.displayName = 'proto.net.gurigoro.kaiji.poker.FoldRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.FoldRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.FoldRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.FoldRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.FoldRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.FoldRequest}
 */
proto.net.gurigoro.kaiji.poker.FoldRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.FoldRequest;
  return proto.net.gurigoro.kaiji.poker.FoldRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.FoldRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.FoldRequest}
 */
proto.net.gurigoro.kaiji.poker.FoldRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.FoldRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.FoldRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.FoldRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.FoldRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.poker.FoldRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.poker.FoldRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.FoldRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.FoldRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 userId = 3;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.FoldRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.FoldRequest.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.FoldReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.gurigoro.kaiji.poker.FoldReply.repeatedFields_, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.FoldReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.FoldReply.displayName = 'proto.net.gurigoro.kaiji.poker.FoldReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.gurigoro.kaiji.poker.FoldReply.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.FoldReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.FoldReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.FoldReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.FoldReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nextplayersavailableactionsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.FoldReply}
 */
proto.net.gurigoro.kaiji.poker.FoldReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.FoldReply;
  return proto.net.gurigoro.kaiji.poker.FoldReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.FoldReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.FoldReply}
 */
proto.net.gurigoro.kaiji.poker.FoldReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>} */ (reader.readPackedEnum());
      msg.setNextplayersavailableactionsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.FoldReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.FoldReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.FoldReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.FoldReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNextplayersavailableactionsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.poker.FoldReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.poker.FoldReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 userId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.FoldReply.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.FoldReply.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated PlayerAction nextPlayersAvailableActions = 3;
 * @return {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>}
 */
proto.net.gurigoro.kaiji.poker.FoldReply.prototype.getNextplayersavailableactionsList = function() {
  return /** @type {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerAction>} value */
proto.net.gurigoro.kaiji.poker.FoldReply.prototype.setNextplayersavailableactionsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.net.gurigoro.kaiji.poker.PlayerAction} value
 * @param {number=} opt_index
 */
proto.net.gurigoro.kaiji.poker.FoldReply.prototype.addNextplayersavailableactions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.net.gurigoro.kaiji.poker.FoldReply.prototype.clearNextplayersavailableactionsList = function() {
  this.setNextplayersavailableactionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.displayName = 'proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    playercards: (f = msg.getPlayercards()) && trump_pb.TrumpCards.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest;
  return proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 4:
      var value = new trump_pb.TrumpCards;
      reader.readMessage(value,trump_pb.TrumpCards.deserializeBinaryFromReader);
      msg.setPlayercards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPlayercards();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      trump_pb.TrumpCards.serializeBinaryToWriter
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 userId = 3;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional net.gurigoro.kaiji.TrumpCards playerCards = 4;
 * @return {?proto.net.gurigoro.kaiji.TrumpCards}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.prototype.getPlayercards = function() {
  return /** @type{?proto.net.gurigoro.kaiji.TrumpCards} */ (
    jspb.Message.getWrapperField(this, trump_pb.TrumpCards, 4));
};


/** @param {?proto.net.gurigoro.kaiji.TrumpCards|undefined} value */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.prototype.setPlayercards = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.prototype.clearPlayercards = function() {
  this.setPlayercards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsRequest.prototype.hasPlayercards = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.displayName = 'proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hand: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply;
  return proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {!proto.net.gurigoro.kaiji.poker.PokerHand} */ (reader.readEnum());
      msg.setHand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getHand();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 userId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional PokerHand hand = 3;
 * @return {!proto.net.gurigoro.kaiji.poker.PokerHand}
 */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.prototype.getHand = function() {
  return /** @type {!proto.net.gurigoro.kaiji.poker.PokerHand} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.net.gurigoro.kaiji.poker.PokerHand} value */
proto.net.gurigoro.kaiji.poker.SetPlayersCardsReply.prototype.setHand = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.GetGameResultRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.GetGameResultRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.GetGameResultRequest.displayName = 'proto.net.gurigoro.kaiji.poker.GetGameResultRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.GetGameResultRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.GetGameResultRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.GetGameResultRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.GetGameResultRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.GetGameResultRequest}
 */
proto.net.gurigoro.kaiji.poker.GetGameResultRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.GetGameResultRequest;
  return proto.net.gurigoro.kaiji.poker.GetGameResultRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.GetGameResultRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.GetGameResultRequest}
 */
proto.net.gurigoro.kaiji.poker.GetGameResultRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.GetGameResultRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.GetGameResultRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.GetGameResultRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.GetGameResultRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.poker.GetGameResultRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.poker.GetGameResultRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.GetGameResultRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.GetGameResultRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.PlayerResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.PlayerResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.PlayerResult.displayName = 'proto.net.gurigoro.kaiji.poker.PlayerResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.PlayerResult.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.PlayerResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.PlayerResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.PlayerResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameresult: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gotpoints: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.PlayerResult}
 */
proto.net.gurigoro.kaiji.poker.PlayerResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.PlayerResult;
  return proto.net.gurigoro.kaiji.poker.PlayerResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.PlayerResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.PlayerResult}
 */
proto.net.gurigoro.kaiji.poker.PlayerResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {!proto.net.gurigoro.kaiji.poker.PlayerResult.GameResult} */ (reader.readEnum());
      msg.setGameresult(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGotpoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.PlayerResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.PlayerResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.PlayerResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.PlayerResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getGameresult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getGotpoints();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.net.gurigoro.kaiji.poker.PlayerResult.GameResult = {
  LOSE: 0,
  TIE: 1,
  WIN: 2
};

/**
 * optional int64 userId = 1;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.PlayerResult.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.PlayerResult.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional GameResult gameResult = 2;
 * @return {!proto.net.gurigoro.kaiji.poker.PlayerResult.GameResult}
 */
proto.net.gurigoro.kaiji.poker.PlayerResult.prototype.getGameresult = function() {
  return /** @type {!proto.net.gurigoro.kaiji.poker.PlayerResult.GameResult} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.net.gurigoro.kaiji.poker.PlayerResult.GameResult} value */
proto.net.gurigoro.kaiji.poker.PlayerResult.prototype.setGameresult = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 gotPoints = 3;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.PlayerResult.prototype.getGotpoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.PlayerResult.prototype.setGotpoints = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.GetGameResultReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.gurigoro.kaiji.poker.GetGameResultReply.repeatedFields_, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.GetGameResultReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.GetGameResultReply.displayName = 'proto.net.gurigoro.kaiji.poker.GetGameResultReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.gurigoro.kaiji.poker.GetGameResultReply.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.GetGameResultReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.GetGameResultReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.GetGameResultReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.GetGameResultReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false),
    playerresultsList: jspb.Message.toObjectList(msg.getPlayerresultsList(),
    proto.net.gurigoro.kaiji.poker.PlayerResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.GetGameResultReply}
 */
proto.net.gurigoro.kaiji.poker.GetGameResultReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.GetGameResultReply;
  return proto.net.gurigoro.kaiji.poker.GetGameResultReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.GetGameResultReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.GetGameResultReply}
 */
proto.net.gurigoro.kaiji.poker.GetGameResultReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    case 2:
      var value = new proto.net.gurigoro.kaiji.poker.PlayerResult;
      reader.readMessage(value,proto.net.gurigoro.kaiji.poker.PlayerResult.deserializeBinaryFromReader);
      msg.addPlayerresults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.GetGameResultReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.GetGameResultReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.GetGameResultReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.GetGameResultReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPlayerresultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.net.gurigoro.kaiji.poker.PlayerResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.poker.GetGameResultReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.poker.GetGameResultReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated PlayerResult playerResults = 2;
 * @return {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerResult>}
 */
proto.net.gurigoro.kaiji.poker.GetGameResultReply.prototype.getPlayerresultsList = function() {
  return /** @type{!Array.<!proto.net.gurigoro.kaiji.poker.PlayerResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.net.gurigoro.kaiji.poker.PlayerResult, 2));
};


/** @param {!Array.<!proto.net.gurigoro.kaiji.poker.PlayerResult>} value */
proto.net.gurigoro.kaiji.poker.GetGameResultReply.prototype.setPlayerresultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.net.gurigoro.kaiji.poker.PlayerResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.net.gurigoro.kaiji.poker.PlayerResult}
 */
proto.net.gurigoro.kaiji.poker.GetGameResultReply.prototype.addPlayerresults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.net.gurigoro.kaiji.poker.PlayerResult, opt_index);
};


proto.net.gurigoro.kaiji.poker.GetGameResultReply.prototype.clearPlayerresultsList = function() {
  this.setPlayerresultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest.displayName = 'proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameroomid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest}
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest;
  return proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest}
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameroomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameroomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 gameRoomId = 2;
 * @return {number}
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest.prototype.getGameroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomRequest.prototype.setGameroomid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply.displayName = 'proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply.prototype.toObject = function(opt_includeInstance) {
  return proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    issucceed: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply}
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply;
  return proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply}
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssucceed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssucceed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isSucceed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply.prototype.getIssucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.net.gurigoro.kaiji.poker.DestroyGameRoomReply.prototype.setIssucceed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.net.gurigoro.kaiji.poker.PlayerAction = {
  NONE: 0,
  CALL: 2,
  RAISE: 3,
  CHECK: 4,
  FOLD: 5,
  OPEN_CARDS: 6
};

/**
 * @enum {number}
 */
proto.net.gurigoro.kaiji.poker.BettingResult = {
  SUCCEED: 0,
  NO_ENOUGH_POINTS: 1,
  NOT_ENOUGH_TO_RAISE: 2,
  UNKNOWN_FAILED: 3
};

/**
 * @enum {number}
 */
proto.net.gurigoro.kaiji.poker.PokerHand = {
  UNKNOWN: 0,
  HIGH_CARDS: 1,
  ONE_PAIR: 2,
  TWO_PAIRS: 3,
  THREE_OF_A_KIND: 4,
  STRAIGHT: 5,
  FLUSH: 6,
  FULL_HOUSE: 7,
  FOUR_OF_A_KIND: 8,
  STRAIGHT_FLUSH: 9,
  ROYAL_STRAIGHT_FLUSH: 10
};

goog.object.extend(exports, proto.net.gurigoro.kaiji.poker);
